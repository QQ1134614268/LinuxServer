03.解决问题:
    解决问题:
        尽心尽力,先做
        怎么算尽心尽力
        结果不行,不可以
    一切反馈到文本文件中,引用,git对比

    代码重构:
        智慧指挥-回放
            原子函数,
            编排不同,业务逻辑相似, 类似压缩至0?? 不能无限优化, 嵌套层级, 
            
            编排优化
    shell脚本优化:
        系统的语法
        合适的变量命,相似的内容

    mapreduce异常复杂分析(记一次脚本开发感受):
        拆分,产生大量mapreduce, 增加复杂度:
            拆小变多,也是复杂度
        依赖其他mapreduce
        初始数据不是格式化, 增加if分支 
            -- if可以合并到map中, 避免更多函数, 需要环境变量,依赖其他mapreduce
            -- 格式化数据,预处理??
        MapReduce: 增加if判断, 数据缺失,需要类似环境参数, 多个mapreduce
        单个对象与list,不能融合 -- ?? 装饰器,统一批量
        链式,核心,修饰--主次重要不分,重复修改,没有内核,导致思维混乱,
        
        环境处理法, env={arg:{},result:{}}
        
        结合,
技巧:
    最优方案: 自己想出来的方案，网上更好的方案, 经验, 类似场景, 确定是正确的
    公司办公与居家办公: 有进度，持续
    领导的期望  管理相关的技术，人，推进项目。
    前端联调，  吐槽后端技术，接口报错，测试，组装数据
    领导 请客

    管理者，反面的对比，招人，文化，

    收买手下，处决手下，麦琪家机枪手
    
    非空想，写出来，慢慢迭代修改

    自言自语 起头
    经验套用  做不到原因  曾经xxx
    混乱源自未掌握 练习

    类似提建议，向别人，有收益。需求

    - 某个场景,联想建立规则都做不到, 说一个概念,不能想到定义和联想
    推动, 想要的结果, 争取资源
    评估问题困难度: 曾经做过,就感觉很容易, 可能未了解的依然很多; 评估-- 自我完成 80%  实际30%; 从工作内容, 对比 -- 重新分析
    喜欢考虑细化场景,复杂化逻辑
    冲动,拍脑袋决定

    yaml:记录所有, issue追踪，网站与文本 历史问题 技术选型升级讨论记录
    分类感悟
        当数量足够多时, 不在以用途,关联 分类到一起; 线性函数--
    不是你死我亡的胜利,只是斩断侵略双手的胜利
    
    话不能全信, eg:看着好年轻;没有头绪的话;不符合事实的话;具有决定因素的人的话,随便说点好话

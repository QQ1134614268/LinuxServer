接口:
    增删改查
    日志
    权限
    缓存 
    文档

开发:
    开发文档:
        流程图
        表结构
        背景
    接口开发:
        查询:
            条件
            name type等
            list单表查询--分布式
        新增:
            createBy 等
            防重 
            幂等
            一对多
        表结构:
            主键
            索引
            注释
            类型
            长度
            
            宽表设计
            逻辑删除
               
            枚举表 -- 系统 自定义  -- 枚举 不再使用枚举Id关联, 使用value,code 或者, 翻译 字段使用
                常量表
                用户枚举
                场景: world -- 数字(不变化) 省市信息(很少变化), 百度api地址等

                增加枚举-- 运行枚举,同步数据库?? 还是代码中数据库查询???

            表结构设计(json嵌套与打平):
                布控表:
                    布控类别:
                        船舶: 布控条件,审批条件,布控状态
                        人车: 布控条件,审批条件,布控状态
                        场所: 布控条件
                        黑名单: 布控条件

                    一个字段:
                        json, 嵌套, 类别,条件等
                    两个字段:
                        类别
                        条件,等
                    多个字段:
                        类别
                        条件拆出
                        布控状态
                    极致扁平化:
                        类别中字段拆出
                        所有字段单独在表

                    数据库设计:
                        一个表,不存在传递依赖
                        字段冗余,序列化

                form 表单:
                    表单大导致 字段增多
                    类别 导致字段需求不一致

                    引入json:
                        减少字段,易于理解, json字段不易查询, json字段产生 字符串sql,难以修改
                    
                        复杂, 字段多,相互影响; 嵌套层级多逻辑复杂
                        
                        极致场景推论, 全用字段, 难以理解(作为出入参); 
                        
                        封装,领域-- 
                        
                        使用多字段, 使用函数封装, 而不是数据库字段封装???

        测试文件
            数据
            查询
            增加
            修改
            隐藏删除
            测试与优化提单
            构建测试用例:
                idea-httpclient
                单元测试
                代码优化--应该是更快的?

    归类与统计 -- 布控多表统计,, 为了统计,增加标识,写入库复杂; 为了解决问题引入未知,改变前提条件,(思考本质?还是未解决当前问题偷懒?)
        -- 统计依赖标识  设备视频预警时间
        
    阶段推进, 紧密关联的一起
    需求文档阅读不方便,UI可能隐藏, 需求串讲
    一条数据异常,导致列表查询异常
    常见使用小内存,异常,热点导致资源更多,导致异常
    idea 代码检查
    swagger --
        Q: consumes 设置consumes / 特殊符号路径问题   springboot 版本
        1. 全局设置consumes 无效
        2. get 使用 urlencode ; post使用json
        3. swagger3 默认 json urlencode; swagger1 默认空
    更新与修改合并-- ??
	图形结构(多参数,形成笛卡尔积场景, 参数相互影响):
		eg: json序列化,, 注入类型, 序列化类, 操作数据类型 添加@type 支持自动映射
		只面对单一参数:
            - 1. 不同序列化类 生成数据对比
            - 2. 不同参数(@type) 测试反序列化
            - 3. 多参数, 测试注入, debugger, 查看注入的实际类型
            - 4. 测试操作数据类型(string hash)
            - 5. 测试数组与Object 序列化与返许泪花, 思考mybatisPlus自动映射类型, kafka数据序列化
            - 6. 思考springboot接口, 自动序列化类型,, 自定义序列化类(LocalDate等), MessageConvert
    关于日期边界:
        - 范围查询, 由前端补齐
        - 所有时间,都带秒级数据
        - 日期补全
        - 日期默认值
        - 日期包含右边界, 日期加一预处理, 或 数据库时间转日期
    maven 插件:
        maven-jar-plugin: 默认打包插件,打成普通的jar包, 可配置打包内容
        maven-shade-plugin: 可执行jar包, fat jar
        maven-assebly-plugiin: 支持自定义打包结构,定制依赖项等
        spring-boot-maven-plugin: springboot专用插件 可定制

        maven-dependency-plugin: 复制依赖的jar包到指定的文件夹里
        maven-resources-plugin: 用于复制指定的文件
        maven-surefire-plugin: 跳过单元测试等
        maven-compiler-plugin: 早期编译插件??
    maven:
        下载jar包时:
            - 生成 _remote.repositories
            - 向 _remote.repositories 写入 仓库名称, 代表通过验证

        删除 _remote.repositories:
            - 不会自动生成, 触发下载时才会生成(首次下载)
            - 不验证配置文件仓库名

        存在 _remote.repositories 文件时: 验证 _remote.repositories 包含 配置文件仓库名

        maven仓库名不存在_remote.repositories时(配置文件仓库更改),重新验证 jar包:
            验证失败: idea提示异常 , 生成.lastUpdated 文件生成规律
            验证通过: 并往_remote.repositories 写入仓库名称
        maven爆红:
            现象: 提示Failure to transfer xxx (全体爆红)
            原因: maven 加载依赖, 会根据pom中的配置的版本查找依赖, 离线时不能下载
            解决方案: 排除依赖(解决爆红), 添加依赖(指定版本,解决依赖); 或者配置dependencyManagement

    ffmpeg 源码编译:
        ./configure --prefix=/home/ns-coastal/ffmpeg34 --enable-shared --enable-static --disable-asm
        make -j8
        make install
        
        添加 /home/ns-coastal/ffmpeg34/lib 到 /etc/ld.so.conf  
        
        配置生效 ldconfig 
        
        --prefix=/usr/lib

    推送数据:
        - 最新  标识 记录上次访问的,类似kafka,携带上次请求记录
        - 轨迹数据
        - 实时数据

    wireshark:
        卡死:
          - 取消 编辑/首选项/Protocols/TLS 选项
          - 取消 接口混杂模式

windows 异常追踪:
	事件查看器
	/控制面板/所有控制面板/安全和维护/可靠性监视程序
    sfc 
    Dism
    重置系统 /设置/更新和安全/恢复/重置系统
    winRE模式
    系统还原

SpringBoot配置文件:
    优先级:
        同优先级: 覆盖
        高优先级: 直接返回
    激活配置:
        运行命令指定配置
        配置文件中 spring.profiles.active
    查找jar包(配置文件)(本地):
        运行参数:
            -classpath
            -cp
            -Djava.ext.dirs
        运行参数eg:
            java -cp foo.jar full.package.name.ClassName
            java -classpath C:\java\MyClasse1;C:\java\MyClass2 com.yiibai.MainApp
            java -Djava.ext.dirs=<多个jar包的目录> com.test.HelloWordMain
        tomcat启动加载目录(https://www.cnblogs.com/zjdxr-up/p/17111093.html):
            1. $java_home/lib 目录下的java核心api
            2. $java_home/lib/ext 目录下的java扩展jar包
            3. java -classpath/-Djava.class.path所指的目录下的类与jar包
            4. $CATALINA_HOME/common目录下按照文件夹的顺序从上往下依次加载
            5. $CATALINA_HOME/server目录下按照文件夹的顺序从上往下依次加载
            6. $CATALINA_BASE/shared目录下按照文件夹的顺序从上往下依次加载
            7. 项目路径/WEB-INF/classes下的class文件
            8. 项目路径/WEB-INF/lib下的jar文件
        SpringBoot启动加载目录(项目路径:运行时目录):
            1. $java_home/lib 目录下的java核心api
            2. $java_home/lib/ext 目录下的java扩展jar包
            3. java -classpath/-Djava.class.path所指的目录下的类与jar包
            
            4. MANIFEST.MF中配置目录
            
            5. 项目路径下的config目录
            6. 项目路径
            7. classpath下的config目录
            8. classpath目录
    配置中心(nacos):
        1. 本地查找bootstrap.yaml
        2. 本地查找bootstrap-env.yaml
        3. 查找 application.yaml
        4. 查找 application-env.yaml
    输出加载目录:
        1. System.getProperty("java.class.path");
        2. jdk8 可以通过     -XX:+TraceClassPaths    参数进行查看jar包的加载顺序
        3. jdk11 可以通过    -Xlog:class+path=info   参数进行查看jar包的加载顺序

git本地仓库:
    服务端:
        git config --global receive.denyCurrentBranch ignore
        git init --bare
    本地主机 remote url: git clone D:\\localGitServer\\PythonTemplate
    服务器主机:
        - git clone \\\\44.39.247.240\\localGitServer\\xc-coastal
        - git clone \\\\YAN09\\localGitServer\\xc-coastal

test:
    取消 assert 断言:
        普通项目使用 junit4 asserttions
        boot 项目 使用 spring asserttions
    junit4 与 junit5
        idea - maven添加 org.junit.platform:junit-platform-launcher:1.3.1


分页查询,id查询, 条件单个查询:
    结果: 使用单个查询
    原因:
        结构不一样, 参数返回值不一样
        预期是一个,如果报错,就是参数有问题, 返回list同是
        优化数据量, 预期一个
